/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import {useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import {a} from '@react-spring/three' //& for using animation purpose 
import islandScene from '../assets/3d/island.glb'

// ^ implementing rotating of island
const Island = ({isRotating, setIsRotating, ...props}) => {

    const islandRef = useRef();

    const{gl, viewport} = useThree(); //^ hook
    const { nodes, materials } = useGLTF(islandScene);
    
    // ^ we have use ref to get last mouse posn
    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95; //^ when we scroll it how fast does it move

    //^ when we press the mouse button down
    const handlePointerDown = (e) => {
      e.stopProgation();
      e.preventDefault();
      setIsRotating(true);
      //^ to check wether what kind of click
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      lastX.current = clientX;
    }
    //^ when we release the mouse
    const handlePointerUp = (e) => {
      e.stopProgation();
      e.preventDefault();
      setIsRotating(false);

      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      lastX.current = clientX;

      //^ to change horizontal position
      const delta = (clientX - lastX.current) / viewport.width;

      //^ to update the island rotation based on the mouse 
      islandRef.current.rotation.y += delta * 0.01 * Math.PI; //& because its circle

      // ^ to update the reference for the last client
      lastX.current = clientX;

      //^ update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
    //^ to move it
    const handlePointerMove = (e) => {
      e.stopProgation();
      e.preventDefault();
      
      //^ only when to happen if we are rotating
      if(isRotating){
        handlePointerUp(e);
      }
    }

    //^ handel event on key down
    const handelKeyDown=(e)=>{
      if(e.key === 'ArrowLeft'){
        if(!isRotating) setIsRotating(true);
        islandRef.current.rotation.y += 0.01 * Math.PI;
      }else if(e.key === 'ArrowRight'){
        if(!isRotating) setIsRotating(true);
        islandRef.current.rotation.y -= 0.01 * Math.PI;
      }
    }
    //^ handel event on key up
    const handelKeyUp=(e)=>{
      if(e.key === 'ArrowLeft' || e.key === 'ArrowRight'){
        setIsRotating(false);
      }
    }

    //^ the way we're going to put all of these to action by using useFrame hook
    useFrame(()=>{
      if(!isRotating){
        rotationSpeed.current *= dampingFactor; //& we can apply damping factor that makes plane go smoother
        if(Math.abs(rotationSpeed.current)<0.01){ //& ccompletly stop the roation if seed is low
          rotationSpeed.current = 0;
        }
      }
      else{
        const rotation = islandRef.current.rotation.y;
      }
    })

    //^ useEffect to add eventlistner
    useEffect(() => {
      document.addEventListener("pointerdown", handlePointerDown);
      document.addEventListener("pointerup", handlePointerUp)
      document.addEventListener("pointermove", handlePointerMove);
      document.addEventListener('keydown', handelKeyDown);
      document.addEventListener('keyup', handelKeyUp);

      return () =>{
        document.removeEventListener("pointerdown", handlePointerDown);
        document.removeEventListener("pointerup", handlePointerUp)
        document.removeEventListener("pointermove", handlePointerMove);
        document.removeEventListener('keydown', handelKeyDown);
        document.removeEventListener('keyup', handelKeyUp);
      }
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])
  return (
    // ^ warap all the elements of 3d folder a.group
    <a.group ref={islandRef} {...props} >
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}



export default Island;